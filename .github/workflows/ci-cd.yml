name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 multimodal_agent_framework --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 multimodal_agent_framework --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check multimodal_agent_framework/

    - name: Type check with mypy
      run: |
        mypy multimodal_agent_framework/ --ignore-missing-imports
      continue-on-error: true  # Allow type checking to fail for now

    - name: Test with pytest
      run: |
        pytest tests/ --cov=multimodal_agent_framework --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Test installation from wheel
      run: |
        # Create fresh environment and test installation
        python -m venv test_install_env
        source test_install_env/bin/activate
        pip install dist/*.whl
        
        # Run installation tests
        python -c "
        from multimodal_agent_framework import MultiModalAgent, Reviewer, generate_function_schema
        from multimodal_agent_framework.connectors import OpenAIConnector
        print('âœ… All critical imports successful')
        
        # Test function schema generator
        def test_func(x: int): return x * 2
        schema = generate_function_schema(test_func)
        assert schema['name'] == 'test_func'
        print('âœ… Function schema generator works')
        
        # Test reviewer
        reviewer = Reviewer('test prompt')
        assert reviewer.review_prompt == 'test prompt'
        print('âœ… Reviewer works')
        
        print('ðŸŽ‰ Package installation verification successful!')
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: test-pypi
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: pypi
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        bandit -r multimodal_agent_framework/ -f json || true